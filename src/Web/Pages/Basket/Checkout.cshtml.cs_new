using Ardalis.GuardClauses;
using Elastic.Apm.Api;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.eShopWeb.ApplicationCore.Entities.OrderAggregate;
using Microsoft.eShopWeb.ApplicationCore.Exceptions;
using Microsoft.eShopWeb.ApplicationCore.Interfaces;
using Microsoft.eShopWeb.Infrastructure.Identity;
using Microsoft.eShopWeb.Web.Interfaces;

namespace Microsoft.eShopWeb.Web.Pages.Basket;

[Authorize]
public class CheckoutModel : PageModel
{
    private readonly IBasketService _basketService;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly IOrderService _orderService;
    private string? _username = null;
    private readonly IBasketViewModelService _basketViewModelService;
    private readonly IAppLogger<CheckoutModel> _logger;

    public CheckoutModel(IBasketService basketService,
        IBasketViewModelService basketViewModelService,
        SignInManager<ApplicationUser> signInManager,
        IOrderService orderService,
        IAppLogger<CheckoutModel> logger)
    {
        _basketService = basketService;
        _signInManager = signInManager;
        _orderService = orderService;
        _basketViewModelService = basketViewModelService;
        _logger = logger;
    }

    public BasketViewModel BasketModel { get; set; } = new BasketViewModel();

    public async Task OnGet()
    {
        //span1
        //ITransaction getbasketcheckout = Elastic.Apm.Agent.Tracer.CurrentTransaction;
        //await getbasketcheckout.CaptureSpan("Set BasketModel", ApiConstants.ActionExec, async () => await Task.Delay(1));

        await SetBasketModelAsync();
    }


    public async Task<IActionResult> OnPost(IEnumerable<BasketItemViewModel> items)
    {
        //span1
        ITransaction currentTransaction = Elastic.Apm.Agent.Tracer.CurrentTransaction;
        //await currentTransaction.CaptureSpan("Basket/Checkout", ApiConstants.ActionExec, async () => await Task.Delay(1));

        //var transaction = Elastic.Apm.Agent
        //.Tracer.StartTransaction("MyTransaction", ApiConstants.TypeRequest);

        try
        {
            await SetBasketModelAsync();

            if (!ModelState.IsValid)
            {
                return BadRequest();
            }

            await currentTransaction.CaptureSpan("Get Item Quantity", ApiConstants.ActionExec, async () => await Task.Delay(1));
            var updateModel = items.ToDictionary(b => b.Id.ToString(), b => b.Quantity);

            await currentTransaction.CaptureSpan("Set Item Quantity", ApiConstants.ActionExec, async () => await Task.Delay(1));
            await _basketService.SetQuantities(BasketModel.Id, updateModel, currentTransaction);


            await currentTransaction.CaptureSpan("Create order from Baset", ApiConstants.ActionExec, async () => await Task.Delay(1));
            await _orderService.CreateOrderAsync(BasketModel.Id, new Address("123 Main St.", "Kent", "OH", "United States", "44240"));
            
            await currentTransaction.CaptureSpan("Compelte order and  delete items from Baset", ApiConstants.ActionExec, async () => await Task.Delay(1));
            await _basketService.DeleteBasketAsync(BasketModel.Id, currentTransaction);
        }
        catch (EmptyBasketOnCheckoutException emptyBasketOnCheckoutException)
        {
            //Redirect to Empty Basket page
            _logger.LogWarning(emptyBasketOnCheckoutException.Message);
            return RedirectToPage("/Basket/Index");
        }

        return RedirectToPage("Success");
    }

    private async Task SetBasketModelAsync()
    {
        Guard.Against.Null(User?.Identity?.Name, nameof(User.Identity.Name));
        if (_signInManager.IsSignedIn(HttpContext.User))
        {
            BasketModel = await _basketViewModelService.GetOrCreateBasketForUser(User.Identity.Name);
        }
        else
        {
            GetOrSetBasketCookieAndUserName();
            BasketModel = await _basketViewModelService.GetOrCreateBasketForUser(_username!);
        }
    }

    private void GetOrSetBasketCookieAndUserName()
    {
        if (Request.Cookies.ContainsKey(Constants.BASKET_COOKIENAME))
        {
            _username = Request.Cookies[Constants.BASKET_COOKIENAME];
        }
        if (_username != null) return;

        _username = Guid.NewGuid().ToString();
        var cookieOptions = new CookieOptions();
        cookieOptions.Expires = DateTime.Today.AddYears(10);
        Response.Cookies.Append(Constants.BASKET_COOKIENAME, _username, cookieOptions);
    }
}
